name: Build and Release

on:
  push:
    branches:
      - main
jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: write
      deployments: write
      discussions: write
      statuses: write
      checks: write
      packages: write
      pages: write
      security-events: write
      repository-projects: write

    steps:
      # Paso 1: Clonar el repositorio
      - name: Check out code
        uses: actions/checkout@v3

      # Paso 2: Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Paso 3: Instalar dependencias del proyecto
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
        continue-on-error: true

      # Paso 4: Generar el ejecutable con PyInstaller
      - name: Build executable
        run: |
          pyinstaller --onefile main.py
        continue-on-error: true  # Si este paso falla, no se procederá a la creación del release

      # Paso 5: Verificar si el ejecutable fue creado correctamente
      - name: Check if executable exists
        run: |
          if (-Not (Test-Path "dist\main.exe")) { exit 1 }  # Si no existe el archivo, falla el flujo

      # Paso 6: Crear un tag para la release
      - name: Create tag
        run: |
          git tag v${{ github.run_number }}  # Crear una etiqueta con el número de ejecución del flujo de trabajo
          git push origin v${{ github.run_number }}  # Subir la etiqueta al repositorio

      # Paso 7: Crear la Release y subir el ejecutable usando softprops/action-gh-release
      - name: Create GitHub Release and Upload Executable
        uses: softprops/action-gh-release@v1
        with:
          files: dist/main.exe  # Ruta del ejecutable generado
          tag_name: v${{ github.run_number }}  # El tag que hemos creado
        env:
          token: ${{ secrets.TOKEN_GITHUB }}  # Usa el token de acceso personal o el token de GitHub
